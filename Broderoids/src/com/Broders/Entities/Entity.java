package com.Broders.Entities;

import com.Broders.Logic.CoreLogic;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.physics.box2d.Body;
import com.badlogic.gdx.physics.box2d.BodyDef;
import com.badlogic.gdx.physics.box2d.FixtureDef;

/**
 * All entities will be derived from this class. It handles most
 * of the logic involed in positioning on the screen, as well as
 * holding and dealing with the body.
 * 
 * @author ntpeters
 * @author krgauthi
 * 
 */
public abstract class Entity {

	//Core information for the Entity.
	private String ent;
	private String type;
	protected Body body;
	private Sprite sprite;
	
	//These are used when drawing the sprites.
	private float size;
	private Color color;

	//These need to be saved for when teleport() is called.
	private BodyDef bodDef;
	private FixtureDef fixDef;
	
	//An identity unique to this Entity. Is generated by CoreLogic.
	private String id;

	/**
	 * Initializes the Entity with the given Entity type. Also generates
	 * a new unique identity string from CoreLogic.
	 * 
	 * @param id
	 *            A string used to uniquely identify this Entity
	 * @param type
	 *            A string containing the Entity type
	 */
	public Entity(String type) {
		id = CoreLogic.nextId();
	}
	
	/**
	 * Returns the unique identity of this Entity.
	 * 
	 * @return A string containing this Entity's unique ID
	 */
	public String getId() {
		return id;
	}

	/**
	 * Returns the physical Body of this Entity.
	 * 
	 * @return The Body contained by this Entity
	 */
	public Body getBody() {
		return this.body;
	}

	/**
	 * Sets the Entity to a different type.
	 * 
	 * @param ent
	 * 				A string containing the new Entity type
	 */
	public void setEnt(String ent) {
		this.ent = ent;
	}

	/**
	 * Returns the Entity type.
	 * 
	 * @return A string containing the type of Entity
	 */
	public String getEnt() {
		return ent;
	}

	/**
	 * Gets the current X-Coordinate of the Body position (meters). The world
	 * world origin is in the bottom-left corner.
	 * 
	 * @return Body X-Coordinate in meters.
	 */
	public float getX() {
		return this.getBody().getPosition().x;
	}

	/**
	 * Gets the current Y-Coordinate of the Body position (meters). The
	 * world origin is in the bottom-left corner.
	 * 
	 * @return Body Y-Coordinate in meters
	 */
	public float getY() {
		return this.getBody().getPosition().y;
	}

	/**
	 * Creates a new Body for the Entity and attaches a new Fixture to it,
	 * given Body and Fixture Definition objects.
	 * 
	 * @param bodDef
	 *            The Body Definition object for the Body to be created
	 * @param fixDef
	 *            The Fixture Definition object for the Body to be created
	 */
	protected void createBody(BodyDef bodDef, FixtureDef fixDef) {
		this.bodDef = bodDef;
		this.fixDef = fixDef;
		this.body = CoreLogic.getWorld().createBody(bodDef);
		this.body.createFixture(fixDef);
	}

	/**
	 * Returns the angle of rotation from vertical of the Body in degrees.
	 * 
	 * @return The Body's angle of rotation in degrees
	 */
	public float getAngle() {
		return (float) (this.body.getAngle() * (180.00f / Math.PI));
	}

	/**
	 * Returns the Sprite object for this Entity.
	 * 
	 * @return This Entity's Sprite
	 */
	public Sprite getSprite() {
		return this.sprite;
	}

	/**
	 * Sets the sprite file for this Entity.
	 * 
	 * @param sp
	 *            The file path to the sprite image
	 */
	protected void setSprite(String sp) {
		Texture texture = new Texture(Gdx.files.internal(sp));
		this.sprite = new Sprite(texture);
	}

	/**
	 * Returns the size of the Entity in meters. Size is used for
	 * drawing the sprite.
	 * 
	 * @return size in meters
	 */
	public float getSize() {
		return this.size;
	}

	/**
	 * Sets the size of the Entity in meters
	 * 
	 * @param s
	 *            size of Entity in meters
	 */
	public void setSize(float s) {
		this.size = s;
	}

	/**
	 * Gets the color of the Entity.
	 * @return Color enumerator
	 */
	public Color getColor() {
		return this.color;
	}

	/**
	 * Sets the color of the Entity.
	 * @param c
	 * 			The color enumerator for the Entity
	 */
	public void setColor(Color c) {
		this.color = c;
	}

	/**
	 * Overridden by each subclass. Used to 
	 * 
	 * @param sb
	 */
	public abstract void Draw(SpriteBatch sb);

	/**
	 * The same as getIdentity(). Entities should only ever be referenced using
	 * their unique ID.
	 * 
	 * @see #getIdentity()
	 */
	public String toString() {
		return this.id;
	}

	/**
	 * Returns true if the given Entity is this Entity. Compares id
	 * strings to determine equality.
	 * 
	 * @param entity
	 *            Entity to compare to
	 * @return True if entities are the same, false otherwise
	 */
	public boolean equals(Entity entity) {
		return entity.toString().equals(this.id);
	}

	/**
	 * Teleports this entity to the specified coordinates on the screen. This is
	 * Used for screen wrapping. Essentially creates a copy of the body
	 * from the body and fixture definitions in the new location, 
	 * and destroys the original.
	 * 
	 * @param x
	 *           World X-Coordinate to teleport to (meters)
	 * @param y
	 *           World Y-Coordinate to teleport to (meters)
	 */
	public void teleport(float x, float y) {
		//Gets all of the position, direction, and speed information
		//of the current Body
		Vector2 linV = this.body.getLinearVelocity();
		float angV = this.body.getAngularVelocity();
		float angle = this.body.getAngle();

		//Destroys the physical body of this Entity
		CoreLogic.getWorld().destroyBody(this.body);

		//Creates a new Body at the new position, and gives it the
		//fixture and physics information of the old Body.
		this.bodDef.position.set(x, y);
		this.bodDef.angle = angle;
		this.body = CoreLogic.getWorld().createBody(bodDef);
		this.body.createFixture(this.fixDef);
		this.body.setAngularVelocity(angV);
		this.body.setLinearVelocity(linV);
		
		this.body.setUserData(this);
	}

	/**
	 * Returns a Vector2 containing the velocity of this Entity's body.
	 * The vector consists of an x and y direction components.
	 * 
	 * @return This Entity's velocity in Vector2 form.
	 */
	public Vector2 getLinearVelocity() {
		return this.body.getLinearVelocity();
	}
	
	/**
	 * Overridden by subclasses. Is called for every Entity in every
	 * iteration of the main loop. Contains any code that needs to be
	 * executed every loop that is not involved in drawing.
	 */
	public abstract void update();

	/**
	 * Overridden by subclasses. Gets called whenever an Entity needs to
	 * be destroyed. Contains any code that needs to execute upon destruction
	 * of the overriding Entity.
	 */
	public abstract void destroy();
}
